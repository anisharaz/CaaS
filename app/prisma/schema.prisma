// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "nodes"]
}

// ** SCHEMA : public START /////////////////////////////////////////////////////////////////////////
model User {
  // For AUTH
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  UserData      UserData?

  @@schema("public")
}

enum USER_TYPE {
  FREE
  PREMIUM

  @@schema("public")
}

enum USER_STATE {
  ACTIVE
  NEW
  SETTING_UP

  @@schema("public")
}

model UserData {
  id                String          @id @default(cuid())
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String          @unique
  username          String?
  user_state        USER_STATE      @default(NEW)
  vpc               vpc[]
  inbound_rules     inbound_rules[]
  containers        containers[]
  ssh_config        ssh_config[]
  ssh_keys          ssh_keys[]
  resources_limit   resources_limit @relation(fields: [resources_limitId], references: [id], onDelete: Cascade)
  resources_limitId String          @unique
  user_type         USER_TYPE       @default(FREE)

  @@schema("public")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@schema("public")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("public")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@schema("public")
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@schema("public")
}

// ** MODELS FOR APP START ////////////////////////////////////////////////////////////////////////////
model vpc {
  id              String        @id
  vpc_name        String
  nodes           nodes         @relation(fields: [nodeId], references: [id])
  nodeId          String
  network         String
  cidr            String // @unique
  gateway         String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  containers      containers[]
  UserData        UserData      @relation(fields: [UserDataId], references: [id])
  UserDataId      String
  available_vpc   available_vpc @relation(fields: [available_vpcId], references: [id], onDelete: Cascade)
  available_vpcId String        @unique

  @@schema("public")
}

enum CONTAINER_STATE {
  STARTED
  STOPPED

  @@schema("public")
}

enum provision_status {
  PENDING
  SUCCESS
  FAILED

  @@schema("public")
}

model containers {
  name             String           @id
  nick_name        String?
  nodes            nodes            @relation(fields: [nodeId], references: [id])
  nodeId           String
  image            String
  tag              String
  state            CONTAINER_STATE
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  vpc              vpc              @relation(fields: [vpcId], references: [id], onDelete: Cascade)
  vpcId            String
  ip_address       String
  inbound_rules    inbound_rules[]
  UserData         UserData         @relation(fields: [UserDataId], references: [id], onDelete: Cascade)
  UserDataId       String
  ssh_config       ssh_config       @relation(fields: [ssh_config_id], references: [id], onDelete: Cascade)
  ssh_config_id    String           @unique
  ssh_keys         ssh_keys         @relation(fields: [ssh_keysId], references: [id])
  ssh_keysId       String
  provision_status provision_status @default(PENDING)

  @@schema("public")
}

model inbound_rules {
  id                   String     @id @default(cuid())
  nodes                nodes      @relation(fields: [nodeId], references: [id])
  nodeId               String
  rule_name            String // it is config_name in nginx infra. backend
  domain_name          String     @unique
  service_protocol     String
  container_ip         String
  port                 Int
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  UserData             UserData   @relation(fields: [UserDataId], references: [id], onDelete: Cascade)
  UserDataId           String
  containers           containers @relation(fields: [containersName], references: [name], onDelete: Cascade)
  containersName       String
  cloudflare_zone      String
  cloudflare_record_id String

  @@schema("public")
}

model available_vpc {
  id      String  @id @default(cuid())
  cidr    String
  network String
  gateway String
  used    Boolean
  vpc     vpc?
  nodes   nodes   @relation(fields: [nodeId], references: [id])
  nodeId  String

  @@schema("public")
}

model ssh_config {
  id                          String                    @id @default(cuid())
  ssh_proxy_node_name         String
  ssh_proxy_port              Int
  ssh_tunnel_process_id       Int
  createdAt                   DateTime                  @default(now())
  updatedAt                   DateTime                  @updatedAt
  UserData                    UserData                  @relation(fields: [UserDataId], references: [id])
  UserDataId                  String
  containers                  containers?
  available_ssh_proxy_ports   available_ssh_proxy_ports @relation(fields: [available_ssh_proxy_portsId], references: [id], onDelete: Cascade)
  available_ssh_proxy_portsId String                    @unique

  @@schema("public")
}

model available_ssh_proxy_ports {
  id                  String      @id @default(cuid())
  ssh_proxy_node_name String
  ssh_proxy_port      Int
  used                Boolean
  ssh_config          ssh_config?

  @@schema("public")
}

model ssh_keys {
  id          String       @id @default(cuid())
  nick_name   String
  public_key  String
  private_key String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  UserData    UserData     @relation(fields: [UserDataId], references: [id], onDelete: Cascade)
  UserDataId  String
  containers  containers[]

  @@schema("public")
}

model resources_limit {
  id                 String    @id @default(cuid())
  vpc_limit          Int       @default(2)
  container_limit    Int       @default(2)
  ssh_key_limit      Int       @default(2)
  inbound_rule_limit Int       @default(5)
  UserData           UserData?

  @@schema("public")
}

// ** MODELS FOR APP END ////////////////////////////////////////////////////////////////////////////

// ** SCHEMA : public END //////////////////////////////////////////////////////////////////////////////

// ** SCHEMA : nodes START /////////////////////////////////////////////////////////////////////////////
enum NODE_TYPE {
  FREE
  PREMIUM

  @@schema("nodes")
}

model nodes {
  id             String          @id @default(cuid())
  node_name      String          @unique
  node_ip        String          @unique
  node_type      NODE_TYPE
  available_vpc  available_vpc[]
  inbound_rules  inbound_rules[]
  node_resources node_resources?
  containers     containers[]
  vpc            vpc[]

  @@schema("nodes")
}

model node_resources {
  id           String @id @default(cuid())
  total_cpu    Int
  total_memory Int
  total_disk   Int
  used_cpu     Int
  used_memory  Int
  used_disk    Int
  nodes        nodes  @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  nodeId       String @unique

  @@schema("nodes")
}

// ** SCHEMA : nodes END //////////////////////////////////////////////////////////////////////////////

// model cloudflare_zones {
//   id        String @id @default(cuid())
//   zone_name String
//   zone_id   String

//   @@schema("nodes")
// }
