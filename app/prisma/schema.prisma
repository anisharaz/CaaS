// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // For AUTH
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  // For app
  username      String?
  welcomed      Boolean         @default(false)
  vpc           vpc[]
  inbound_rules inbound_rules[]
  containers    containers[]
  ssh_config    ssh_config[]
  ssh_keys      ssh_keys[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// MODELS FOR APP ////////////////////////////////////////////////////////////////////////////
model vpc {
  id              String        @id
  vpc_name        String
  node            String
  network         String
  cidr            String // @unique
  gateway         String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  containers      containers[]
  User            User          @relation(fields: [userId], references: [id])
  userId          String
  available_vpc   available_vpc @relation(fields: [available_vpcId], references: [id], onDelete: Cascade)
  available_vpcId String        @unique
}

enum CONTAINER_STATE {
  STARTED
  STOPPED
}

model containers {
  name          String          @id
  nick_name     String?
  node          String
  image         String
  tag           String
  state         CONTAINER_STATE
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  vpc           vpc             @relation(fields: [vpcId], references: [id], onDelete: Cascade)
  vpcId         String
  ip_address    String
  inbound_rules inbound_rules[]
  User          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  ssh_config    ssh_config      @relation(fields: [ssh_config_id], references: [id], onDelete: Cascade)
  ssh_config_id String          @unique
  ssh_keys      ssh_keys        @relation(fields: [ssh_keysId], references: [id])
  ssh_keysId    String
}

model inbound_rules {
  id               String     @id @default(cuid())
  node             String
  rule_name        String // it is config_name in nginx infra. backend
  domain_name      String     @unique
  service_protocol String
  container_ip     String
  port             Int
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  User             User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  containers       containers @relation(fields: [containersName], references: [name], onDelete: Cascade)
  containersName   String
}

model available_vpc {
  id      String  @id @default(cuid())
  node    String
  cidr    String
  network String
  gateway String
  used    Boolean
  vpc     vpc?
}

model ssh_config {
  id                          String                    @id @default(cuid())
  ssh_proxy_node_name         String
  ssh_proxy_port              Int
  ssh_tunnel_process_id       Int
  createdAt                   DateTime                  @default(now())
  updatedAt                   DateTime                  @updatedAt
  User                        User                      @relation(fields: [userId], references: [id])
  userId                      String
  containers                  containers?
  available_ssh_proxy_ports   available_ssh_proxy_ports @relation(fields: [available_ssh_proxy_portsId], references: [id], onDelete: Cascade)
  available_ssh_proxy_portsId String                    @unique
}

model available_ssh_proxy_ports {
  id                  String      @id @default(cuid())
  ssh_proxy_node_name String
  ssh_proxy_port      Int
  used                Boolean
  ssh_config          ssh_config?
}

model ssh_keys {
  id          String       @id @default(cuid())
  nick_name   String
  public_key  String
  private_key String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  User        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  containers  containers[]
}
