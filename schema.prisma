datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    // For AUTH
    id            String          @id @default(cuid())
    name          String
    email         String          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Authenticator Authenticator[]
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    // For app
    username      String?
    network       network?        @relation(fields: [vpc], references: [id])
    vpc           String?         @unique
    inbound_rules inbound_rules[]
    containers    containers[]
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

// MODELS FOR APP ////////////////////////////////////////////////////////////////////////////
model network {
    id         String       @id @default(cuid())
    node       String
    network    String
    cidr       String
    gateway    String
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    User       User?
    containers containers[]
}

enum CONTAINER_STATE {
    STARTED
    STOPPED
}

model containers {
    name          String          @id
    node          String
    image         String
    tag           String
    state         CONTAINER_STATE
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    network       network         @relation(fields: [networkId], references: [id])
    networkId     String
    inbound_rules inbound_rules[]
    User          User            @relation(fields: [userId], references: [id])
    userId        String
}

model inbound_rules {
    id             String     @id @default(cuid())
    node           String
    rule_name      String // it is config_name in nginx infra. backend
    domain_name    String
    protocol       String
    container_ip   String
    port           String
    createdAt      DateTime   @default(now())
    updatedAt      DateTime   @updatedAt
    User           User       @relation(fields: [userId], references: [id])
    userId         String
    containers     containers @relation(fields: [containersName], references: [name])
    containersName String
}
